package method;import java.util.Arrays;import java.util.HashMap;import java.util.PriorityQueue;/** * <p> * leetcode 347. 前 K 个高频元素 给定一个非空的整数数组，返回其中出现频率前 k 高的元素。 * </p> * * @author lipeilong * @time 2020/9/7 10:58 * @description leetcode 347. 前 K 个高频元素 给定一个非空的整数数组，返回其中出现频率前 k 高的元素。 */public class 前K个高频元素 {    public static void main(String[] args) {        int[] test = {1, 1, 1, 2, 2, 3};        //System.out.println(Arrays.toString(topKFrequent(test, 2)));    }    public int[] topKFrequent(int[] nums, int k) {        if (k > nums.length) {            int[] res = new int[0];            return res;        }        HashMap<Integer, Integer> map = new HashMap<>();        for (int i = 0; i < nums.length; i++) {            if (map.containsKey(nums[i])) {                map.put(nums[i], map.get(nums[i]) + 1);            } else {                map.put(nums[i], 1);            }        }        PriorityQueue<Integer> priorityQueue = new PriorityQueue(k, (a, b) -> {            return map.get(a) - map.get(b);        }        );        for (Integer key : map.keySet()) {            if (priorityQueue.size() < k) {                priorityQueue.add(key);            } else if (map.get(priorityQueue.peek()) < map.get(key)) {                priorityQueue.remove();                priorityQueue.add(key);            }        }        int[] res = new int[k];        int i = 0;        for (Integer num : priorityQueue) {            res[i] = num;            i++;        }        return res;    }}