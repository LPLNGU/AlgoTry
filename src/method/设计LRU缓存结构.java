//package method;////import java.util.Deque;//import java.util.HashMap;//import java.util.LinkedList;/////**// * <p>// * 设计LRU缓存结构，该结构在构造时确定大小，假设大小为K，// * 并有如下两个功能 set(key, value)：将记录(key, value)插入该结构 get(key)：// * 返回key对应的value值// * [要求]// * set和get方法的时间复杂度为O(1) 某个key的set或get操作一旦发生，认为这个key的记录成了最常使用的。// * 当缓存的大小超过K时，移除最不经常使用的记录，即set或get最久远的。// * 若opt=1，接下来两个整数x, y，表示set(x, y) 若opt=2，接下来一个整数x，表示get(x)，若x未出现过或已被移除，则返回-1// * 对于每个操作2，输出一个答案// * </p>// *// * @author lipeilong// * @time 2020/9/7 20:27// * @description 设计LRU缓存结构，该结构在构造时确定大小，假设大小为K，并有如下两个功能 set(key, value)：将记录(key, value)插入该结构 get(key)：返回key对应的value值 [要求] set和get方法的时间复杂度为O(1) 某个key的set或get操作一旦发生，认为这个key的记录成了最常使用的。 当缓存的大小超过K时，移除最不经常使用的记录，即set或get最久远的。 若opt=1，接下来两个整数x, y，表示set(x, y) 若opt=2，接下来一个整数x，表示get(x)，若x未出现过或已被移除，则返回-1 对于每个操作2，输出一个答案// */////public class 设计LRU缓存结构 {//////    HashMap<Integer,Integer> map;//    Deque<Integer> deque;//    public int[] LRU (int[][] operators, int k) {//        if (k<1 || operators == null){//            return null;//        }////        map = new HashMap<>(k);//        deque = new LinkedList<>();//        for (int i = 0; )//    }////}