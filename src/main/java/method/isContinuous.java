package method;import java.util.Arrays;/** * LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)... * 他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！ * “红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子.....LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。 * 上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。 * LL决定去买体育彩票啦。 * 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。 * 为了方便起见,你可以认为大小王是0。 */public class isContinuous {    public static void main(String[] args) {        int[] ints = {0, 3, 2, 6, 4};        //System.out.println(isContinuous(ints));    }    /**     * 第一次写的，效率很低，使用了排序，最快为nlogn     *///    public static boolean isContinuous(int[] numbers) {//        if (numbers.length != 5) {//            return false;//        }//        Arrays.sort(numbers);//        int mistakes = 0, kings = 0;//        for (int i : numbers) {//            if (i == 0) {//                kings++;//            } else {//                break;//            }//        }//        for (int i = kings; i < numbers.length; i++) {//            if (mistakes <= 4) {//                if (i > 0 && numbers[i - 1] != 0 && numbers[i - 1] != numbers[i] - 1) {//                    mistakes += numbers[i] - numbers[i - 1] - 1;//                }//                if (i > 0 && numbers[i - 1] != 0 && numbers[i - 1] == numbers[i]) {//                    return false;//                }//            } else {//                return false;//            }//        }//        if (mistakes <= kings) {//            return true;//        }//        return false;////    }    /**     * 看了答案之后改进,     */    int[] d = new int[14];    public boolean isContinuous(int[] numbers) {        if (numbers.length != 5) {            return false;        }        int max = -1, min = 14;        for (int i : numbers) {            if (i != 0 && d[i] == 0) {                d[i]++;            } else if (d[i] != 0) {                return false;            }            if (i > max) {                max = i;            }            if (i < min && i != 0) {                min = i;            }        }        if (max - min < 5) {            return true;        } else {            return false;        }    }}